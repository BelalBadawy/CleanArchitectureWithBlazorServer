@page "/pages/authentication/login"
@using CleanArchitecture.Blazor.Server.UI.Services.JsInterop
@using Microsoft.AspNetCore.Authentication
@using Severity = Severity
@using CleanArchitecture.Blazor.Application.Common.Security
@using CleanArchitecture.Blazor.Domain.Identity
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using Microsoft.AspNetCore.DataProtection
@using CleanArchitecture.Blazor.Server.UI.Services
@using CleanArchitecture.Blazor.Server.UI.Pages.Identity.Users.Components
@using CleanArchitecture.Blazor.Infrastructure.Constants.User
@using CleanArchitecture.Blazor.Infrastructure.Constants.Role

@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject IIdentityService IdentityService
@inject IStringLocalizer<Login> L
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
<PageTitle>@_title</PageTitle>

<div class="d-flex flex-column gap-y-3">
    <div class="">
        <EditForm Model="_model" method="post" OnValidSubmit="OnSubmit" FormName="login">
            <DataAnnotationsValidator />
            <MudText Typo="Typo.h4" GutterBottom="true">@L["Sign In"]</MudText>
            <MudText>
                @L["Don't have an account?"] <MudLink Href="/pages/authentication/register" Target="_self">@L["Sign Up"]</MudLink>
            </MudText>
            <StatusMessage Message="@errorMessage" />
            <div class="mud-input-control mud-input-input-control my-4">
                <div class="mud-input-control-input-container">
                    <!--!--><!--!-->
                    <div class="mud-input mud-input-outlined mud-shrink">
                        <InputText @bind-Value="_model.UserName" class="mud-input-slot mud-input-root mud-input-root-outlined" type="text" inputmode="text" maxlength="524288" aria-invalid="false" _bl_658="" />
                        <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none" tabindex="-1" _bl_659=""></div>
                        <!--!-->
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <!--!-->
                    <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="mudinput-73ab4ee5-927f-4e83-a085-fb1d9fb2fba9">User Name</label>
                </div>
                <div class="mud-input-control-helper-container">
                    <ValidationMessage For="() => _model.UserName" class="mud-input-error" />
                </div>
            </div>
            <div class="mud-input-control mud-input-input-control my-4">
                <div class="mud-input-control-input-container">
                    <!--!--><!--!-->
                    <div class="mud-input mud-input-outlined mud-shrink">
                        <InputText type="password" @bind-Value="_model.Password" class="mud-input-slot mud-input-root mud-input-root-outlined" inputmode="text" maxlength="524288" aria-invalid="false" _bl_658="" />
                        <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none" tabindex="-1" _bl_659=""></div>
                        <!--!-->
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <!--!-->
                    <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="mudinput-73ab4ee5-927f-4e83-a085-fb1d9fb2fba9">Password</label>
                </div>
                <div class="mud-input-control-helper-container">
                    <ValidationMessage For="() => _model.Password" class="mud-input-error" />
                </div>
            </div>





            <div Class="d-flex justify-space-between align-center">
                <label class="form-label">
                    <InputCheckbox @bind-Value="_model.RememberMe" class="darker-border-checkbox form-check-input" />
                    Remember me
                </label>
                <MudLink Href="/pages/authentication/forgot-password">@L["Forgot password?"]</MudLink>
            </div>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       Disabled="@(_loading)"
                       ButtonType="ButtonType.Submit"
                       FullWidth="true">
                <MudText>@L["Sign In"]</MudText>
            </MudButton>
        </EditForm>

    </div>
    <div class="d-flex flex-column">

            <ExternalLoginPicker />
    
    </div>
</div>

@code {
    private string? errorMessage;
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    private string _title = "Sign In";
    private MudForm? _form;
    private bool _success;
    private bool _loading;
    private AuthenticationScheme[] externalLogins = [];
    [SupplyParameterFromForm]
    private LoginFormModel _model { get; set; } = new()
        {
            UserName = "administrator",
            Password = "Password123!",
            RememberMe = true
        };

    protected override async Task OnInitializedAsync()
    {

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task OnSubmit()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(_model.UserName, _model.Password, _model.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = _model.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }



    private async Task SignInExternal(string provider)
    {
        try
        {
            var info = await SignInManager.GetExternalLoginInfoAsync();
            if (info is null)
            {
                RedirectManager.RedirectToWithStatus("/pages/authentication/login", "Error loading external login information.", HttpContext);
            }

            // await new ExternalAuth(JS).Login(provider, DotNetObjectReference.Create(this));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

    }



    private async Task<ApplicationUser> CreateUserWithExternalProvider(string provider, string userName, string name, string accessToken)
    {
        var user = await UserManager.FindByNameAsync(userName);
        if (user is null)
        {
            var admin = await UserManager.FindByNameAsync(UserName.Administrator) ?? throw new NotFoundException("Administrator's account Not Found.");
            user = new ApplicationUser
                {
                    EmailConfirmed = true,
                    IsActive = true,
                    IsLive = true,
                    UserName = userName,
                    Email = userName.Any(x => x == '@') ? userName : $"{userName}@{provider}.com",
                    Provider = provider,
                    DisplayName = name,
                    SuperiorId = admin.Id,
                    TenantId = admin.TenantId,
                    TenantName = admin.TenantName
                };
            var createResult = await UserManager.CreateAsync(user);
            if (createResult.Succeeded)
            {
                var assignResult = await UserManager.AddToRoleAsync(user, RoleName.Basic);
            }

            await UserManager.AddLoginAsync(user, new UserLoginInfo(provider, userName, accessToken));
        }

        return user;
    }

}