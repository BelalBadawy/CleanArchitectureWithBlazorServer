@page "/pages/authentication/login"
@using CleanArchitecture.Blazor.Server.UI.Services.JsInterop
@using Microsoft.AspNetCore.Authentication
@using Severity = Severity
@using CleanArchitecture.Blazor.Application.Common.Security
@using CleanArchitecture.Blazor.Domain.Identity
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using Microsoft.AspNetCore.DataProtection
@using CleanArchitecture.Blazor.Server.UI.Services
@using CleanArchitecture.Blazor.Server.UI.Pages.Identity.Users.Components
@using CleanArchitecture.Blazor.Infrastructure.Constants.User
@using CleanArchitecture.Blazor.Infrastructure.Constants.Role

@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject IIdentityService IdentityService
@inject IStringLocalizer<Login> L
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
<PageTitle>@_title</PageTitle>
<AuthorizeView>
    <NotAuthorized Context="auth">
        <div class="d-flex flex-column gap-y-3">
            <div class="">
                <EditForm Model="_model" method="post" OnValidSubmit="OnSubmit" FormName="login">
                    <DataAnnotationsValidator />
                    <MudText Typo="Typo.h4" GutterBottom="true">@L["Sign In"]</MudText>
                    <MudText>
                        @L["Don't have an account?"] <MudLink Href="/pages/user/register" Target="_self">@L["Sign Up"]</MudLink>
                    </MudText>
                    <StatusMessage Message="@errorMessage" Error="true" />
                    <div class="mud-input-control mud-input-input-control my-4">
                        <div class="mud-input-control-input-container">
                            <!--!--><!--!-->
                            <div class="mud-input mud-input-outlined mud-shrink">
                                <InputText @bind-Value="_model.UserName" class="mud-input-slot mud-input-root mud-input-root-outlined" type="text" inputmode="text" maxlength="524288" aria-invalid="false"  />
                                <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none" tabindex="-1"></div>
                                <!--!-->
                                <div class="mud-input-outlined-border"></div>
                            </div>
                            <!--!-->
                            <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="mudinput-73ab4ee5-927f-4e83-a085-fb1d9fb2fba9">@L["User name"]</label>
                        </div>
                        <div class="mud-input-helper-text mud-input-error">
                            <div class="d-flex">
                            <ValidationMessage For="() => _model.UserName" class="mud-input-error" />
                        </div>
                        </div>
                    </div>
                    <div class="mud-input-control mud-input-input-control my-4">
                        <div class="mud-input-control-input-container">
                            <!--!--><!--!-->
                            <div class="mud-input mud-input-outlined mud-shrink">
                                <InputText type="password" @bind-Value="_model.Password" class="mud-input-slot mud-input-root mud-input-root-outlined" inputmode="text" maxlength="524288" aria-invalid="false" />
                                <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none" tabindex="-1"></div>
                                <!--!-->
                                <div class="mud-input-outlined-border"></div>
                            </div>
                            <!--!-->
                            <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="mudinput-73ab4ee5-927f-4e83-a085-fb1d9fb2fba9">@L["Password"]</label>
                        </div>
                        <div class="mud-input-helper-text mud-input-error">
                            <div class="d-flex">
                                <ValidationMessage For="() => _model.Password" class="mud-input-error" />
                            </div>
                        </div>
                    </div>





                    <div Class="d-flex justify-space-between align-center mb-1">
                        <label class="form-label">
                            <InputCheckbox @bind-Value="_model.RememberMe" class="darker-border-checkbox form-check-input" />
                            @L["Remember me"]
                        </label>
                        <MudLink Href="/pages/user/forgot-password">@L["Forgot password?"]</MudLink>
                    </div>

                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               Disabled="@(_loading)"
                               ButtonType="ButtonType.Submit"
                               FullWidth="true">
                        <MudText>@L["Sign In"]</MudText>
                    </MudButton>
                </EditForm>

            </div>
            <div class="d-flex flex-column">

                <ExternalLoginPicker />

            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <RedirectToHome></RedirectToHome>
        <MudAlert Severity="Severity.Info" Class="mt-8 mud-width-full" Style="max-width:500px;">@L["You are already logged in."]</MudAlert>
    </Authorized>
</AuthorizeView>
@code {
    private string? errorMessage;
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    private string _title = "Sign In";
    private MudForm? _form;
    private bool _success;
    private bool _loading;
    private AuthenticationScheme[] externalLogins = [];
    [SupplyParameterFromForm]
    private LoginFormModel _model { get; set; } = new()
        {
            UserName = "administrator",
            Password = "Password123!",
            RememberMe = true
        };

    protected override async Task OnInitializedAsync()
    {

        if (HttpContext is not null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task OnSubmit()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(_model.UserName, _model.Password, _model.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation($"{_model.UserName} logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = _model.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning($"{_model.UserName} account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = L["Error: Invalid login attempt."];
        }
    }


}