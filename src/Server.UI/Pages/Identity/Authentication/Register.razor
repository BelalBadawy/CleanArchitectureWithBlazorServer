@page "/pages/user/register"

@attribute [AllowAnonymous]
@using CleanArchitecture.Blazor.Application.Features.Identity.Commands.SendWelcome
@using CleanArchitecture.Blazor.Application.Features.Identity.Commands.UserActivation
@using Severity = Severity
@using CleanArchitecture.Blazor.Application.Common.Security
@using CleanArchitecture.Blazor.Domain.Identity
@using FluentEmail.Core.Models
@using CleanArchitecture.Blazor.Infrastructure.Constants.Role
@using System.ComponentModel.DataAnnotations
@inherits OwningComponentBase

@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject IMailService MailService
@inject IStringLocalizer<Register> L
@inject IValidationService Validator
@inject ILogger<Register> Logger
@inject ISender Sender
@inject IdentityRedirectManager RedirectManager
<PageTitle>@Title</PageTitle>


<MudForm Model="@_model" @ref="@_form" Validation="@(Validator.ValidateValue(_model))">
    <MudText Typo="Typo.h4" GutterBottom="true">@L["Sign Up"]</MudText>
    <MudText>
        @L["Have an account?"] <MudLink Href="@Login.PageUrl">@L["Sign In"]</MudLink>
    </MudText>
    <StatusMessage Error="true" Message="@message"></StatusMessage>
    <MudTextField T="string"
                  Immediate="true"
                  Label="@L["User Name"]"
                  @bind-Value="_model.UserName"
                  For="@(() => _model.UserName)"
                  Variant="Variant.Outlined"
                  Required="true"
                  Class="my-4">
    </MudTextField>

    <MudTextField T="string"
                  Immediate="true"
                  Label="@L["E-mail"]"
                  @bind-Value="_model.Email"
                  For="@(() => _model.Email)"
                  Required="true"
                  Variant="Variant.Outlined">
    </MudTextField>

    <MudPasswordField Immediate="true"
                      Label="@L["Password"]"
                      @bind-Value="_model.Password"
                      For="@(() => _model.Password)"
                      PasswordMode="true"
                      Variant="Variant.Outlined"
                      Required="true"
                      Class="mt-4" />
    <MudPasswordField Immediate="true"
                      Label="@L["Confirm Password"]"
                      @bind-Value="_model.ConfirmPassword"
                      For="@(() => _model.ConfirmPassword)"
                      Variant="Variant.Outlined"
                      PasswordMode="true"
                      Required="true"
                      Class="mt-4" />

    <MudCheckBox For="@(() => _model.AgreeToTerms)" @bind-Value="@_model.AgreeToTerms" Label="@L["I agree to the terms and privacy"]" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>

    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               Disabled="@(!_model.AgreeToTerms || _loading)"
               Size="Size.Large"
               OnClick="@(async () => await Submit())"
               FullWidth="true">
        @if (_loading)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2"> @ConstantString.Loading</MudText>
        }
        else
        {
            <MudText>@L["Register"]</MudText>
        }
    </MudButton>
</MudForm>


@code {

    public const string PageUrl = "/pages/user/register";
    private string Title = "Sign Up";
    private string? message;
    private MudForm? _form;
    private bool _loading;
    private readonly RegisterFormModel _model = new();
    protected override void OnInitialized()
    {
        Title = L["Sign Up"];
    }
    private async Task Submit()
    {
        try
        {
            _loading = true;
            await _form!.Validate();
            if (_form!.IsValid)
            {
                var user = new ApplicationUser
                    {
                        UserName = _model.UserName,
                        Email = _model.Email,
                        IsActive = true
                    };
                var result = await UserManager.CreateAsync(user, _model.Password!);
                if (result.Succeeded)
                {
                    var assignResult = await UserManager.AddToRoleAsync(user, RoleName.Basic);
                    if (assignResult.Succeeded && !string.IsNullOrEmpty(user.Email) && !string.IsNullOrEmpty(user.UserName))
                    {

                        if (UserManager.Options.SignIn.RequireConfirmedEmail)
                        {
                            var sentResult = await Sender.Send(new UserActivationCommand(user.Email));
                            if (sentResult.Succeeded)
                            {
                                Snackbar.Add(string.Format(L["Activation Email Sent. Please check your email to confirm your account."], Severity.Info));
                                Navigation.NavigateTo(Login.PageUrl, true);
                            }
                            else
                            {
                                Snackbar.Add(string.Format(L["{0}"], sentResult.Errors.FirstOrDefault()), Severity.Error);
                                message = sentResult.Errors.FirstOrDefault();
                            }
                        }
                        else
                        {
                            Snackbar.Add(L["Register successfully!"], Severity.Info);
                            var response = await Sender.Send(new SendWelcomeCommand(user.Email));
                            if (response.Succeeded == false)
                            {
                                Snackbar.Add(string.Format(L["{0}"], response.Errors.FirstOrDefault()), Severity.Warning);
                            }
                            Navigation.NavigateTo(Login.PageUrl, true);
                        }
                        Logger.LogInformation("New user registration succeeded. Username: {@UserName:l}, UserId: {@UserId}", user.UserName, user.Id);

                    }
                    else
                    {
                        Snackbar.Add($"{string.Join(",", result.Errors.Select(x => x.Description))}", Severity.Error);
                    }

                }
                else
                {
                    Snackbar.Add($"{string.Join(",", result.Errors.Select(x => x.Description))}", Severity.Error);
                }
            }
        }
        finally
        {
            _loading = false;
        }
    }

    public sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; } = "";
        [Compare("true", ErrorMessage = "The password and confirmation password do not match.")]
        public bool AgreeToTerms { get; set; } = true;
    }

}